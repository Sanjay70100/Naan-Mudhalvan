{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1o6Gbig-jBflcMtzT-wm57Y-TcxifVaOE","timestamp":1747739281007}],"authorship_tag":"ABX9TyPmI2peFlyff6HQ8YE/xDAz"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":161},"id":"Q7kA7idCWk1Y","executionInfo":{"status":"error","timestamp":1747739229663,"user_tz":-330,"elapsed":240,"user":{"displayName":"Thamarai","userId":"03148480783386766842"}},"outputId":"b686f58a-61d7-4210-9b7a-39bc4ba8e638"},"outputs":[{"output_type":"error","ename":"IndentationError","evalue":"unindent does not match any outer indentation level (<tokenize>, line 307)","traceback":["\u001b[0;36m  File \u001b[0;32m\"<tokenize>\"\u001b[0;36m, line \u001b[0;32m307\u001b[0m\n\u001b[0;31m    return responses.get(user_input.lower(), \"Sorry, I didn't understand that.\")\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unindent does not match any outer indentation level\n"]}],"source":["##phase 3\n","import heapq\n","import matplotlib.pyplot as plt\n","\n","grid = [[0, 0, 0, 0, 0],\n","        [1, 1, 0, 1, 0],\n","        [0, 0, 0, 1, 0],\n","        [0, 1, 1, 0, 0],\n","        [0, 0, 0, 0, 0]]\n","\n","start, end = (0, 0), (4, 4)\n","\n","def heuristic(a, b):\n","    return abs(a[0]-b[0]) + abs(a[1]-b[1])\n","\n","def astar(grid, start, end):\n","    heap, visited, came_from = [(0, start)], set(), {}\n","    g_score = {start: 0}\n","    while heap:\n","        _, current = heapq.heappop(heap)\n","        if current == end:\n","            path = []\n","            while current in came_from:\n","                path.append(current)\n","                current = came_from[current]\n","            path.append(start)\n","            return path[::-1]\n","        visited.add(current)\n","        for dx, dy in [(-1,0),(1,0),(0,-1),(0,1)]:\n","            neighbor = (current[0]+dx, current[1]+dy)\n","            if 0<=neighbor[0]<len(grid) and 0<=neighbor[1]<len(grid[0]) and grid[neighbor[0]][neighbor[1]]==0:\n","                tentative_g = g_score[current] + 1\n","                if neighbor not in g_score or tentative_g < g_score[neighbor]:\n","                    came_from[neighbor] = current\n","                    g_score[neighbor] = tentative_g\n","                    f_score = tentative_g + heuristic(end, neighbor)\n","                    heapq.heappush(heap, (f_score, neighbor))\n","    return []\n","\n","path = astar(grid, start, end)\n","print(\"Path found:\", path)\n","\n","# Plotting\n","for r in range(len(grid)):\n","    for c in range(len(grid[0])):\n","        if grid[r][c] == 1:\n","            plt.scatter(c, -r, color='black')\n","plt.plot([p[1] for p in path], [-p[0] for p in path], marker='o', color='blue')\n","plt.title(\"A* Path Planning\")\n","plt.grid()\n","plt.show()\n","##1. AI Decision Engine â€“ Path Planning (A)*\n","##2. Chatbot Command Simulator (Simple Python Version)\n"," def chatbot(command):\n","    responses = {\n","        \"start\": \"Robot is starting...\",\n","        \"stop\": \"Robot has stopped.\",\n","        \"status\": \"All systems are running smoothly.\",\n","        \"help\": \"Available commands: start, stop, status, help\"\n","    }\n","    return responses.get(command.lower(), \"Command not recognized.\")\n","\n","print(chatbot(\"start\"))\n","print(chatbot(\"status\"))\n","print(chatbot(\"stop\"))\n","## 3. IoT Sensor Data Simulation\n"," import random\n","import time\n","\n","def read_ultrasonic_sensor():\n","    return round(random.uniform(10.0, 100.0), 2)\n","\n","for i in range(5):\n","    distance = read_ultrasonic_sensor()\n","    print(f\"Distance: {distance} cm\")\n","    time.sleep(1)\n","##Secure Communication Simulation (Simple Message Encryption)\n","from cryptography.fernet import Fernet\n","\n","# Generate a key\n","key = Fernet.generate_key()\n","cipher = Fernet(key)\n","\n","# Simulated sensor data\n","data = \"Sensor reading: 82.5 cm\"\n","\n","# Encrypt\n","encrypted = cipher.encrypt(data.encode())\n","print(\"Encrypted:\", encrypted)\n","\n","# Decrypt\n","decrypted = cipher.decrypt(encrypted)\n","print(\"Decrypted:\", decrypted.decode())\n","##A* Pathfinding + Chatbot Interaction Example\n","##phase4\n","import matplotlib.pyplot as plt from queue import PriorityQueue import ipywidgets as widgets from IPython.display import display, clear_output\n"," grid (0 = free, 1 = obstacle)\n","\n","grid_data = [ [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 1, 0], [1, 1, 0, 1, 0], [0, 0, 0, 0, 0] ]\n","\n","rows, cols = len(grid_data), len(grid_data[0]) grid = [(r, c) for r in range(rows) for c in range(cols)]\n","\n","##Helper functions\n","\n","def heuristic(a, b): return abs(a[0] - b[0]) + abs(a[1] - b[1])\n","\n","def get_neighbors(node, grid): neighbors = [] for dr, dc in [(0,1), (1,0), (0,-1), (-1,0)]: r, c = node[0] + dr, node[1] + dc if 0 <= r < rows and 0 <= c < cols and grid_data[r][c] == 0: neighbors.append((r, c)) return neighbors\n","\n","def cost(a, b): return 1\n","\n","def reconstruct_path(came_from, current): path = [current] while current in came_from: current = came_from[current] path.append(current) path.reverse() return path\n","\n","def a_star_optimized(grid, start, end): open_set = PriorityQueue() open_set.put((0, start)) came_from = {} g_score = {node: float('inf') for node in grid} g_score[start] = 0 f_score = {node: float('inf') for node in grid} f_score[start] = heuristic(start, end)\n","\n","while not open_set.empty():\n","    current = open_set.get()[1]\n","    if current == end:\n","        return reconstruct_path(came_from, current)\n","\n","    for neighbor in get_neighbors(current, grid):\n","        tentative_g = g_score[current] + cost(current, neighbor)\n","        if tentative_g < g_score[neighbor]:\n","            came_from[neighbor] = current\n","            g_score[neighbor] = tentative_g\n","            f_score[neighbor] = tentative_g + heuristic(neighbor, end)\n","            open_set.put((f_score[neighbor], neighbor))\n","return []\n","\n","##Visualize the path\n","\n","def visualize_path(path, start, end): for r in range(rows): for c in range(cols): if grid_data[r][c] == 1: plt.plot(c, -r, 'ks') for r, c in path: plt.plot(c, -r, 'go-') plt.plot(start[1], -start[0], 'bo', label=\"Start\") plt.plot(end[1], -end[0], 'ro', label=\"End\") plt.title(\"A* Path Planning\") plt.axis('off') plt.legend() plt.grid() plt.show()\n","\n","##Chatbot simulation\n","\n","def chatbot_response(user_input): user_input = user_input.lower() if \"navigate\" in user_input: start = (0, 0) end = (4, 4) path = a_star_optimized(grid, start, end) print(\"Navigating to destination...\") print(\"Optimal Path:\", path) visualize_path(path, start, end) elif \"stop\" in user_input: print(\"Vehicle stopped.\") elif \"status\" in user_input: print(\"System running. All sensors active.\") elif \"emergency\" in user_input: print(\"Emergency protocol activated. Notifying control center.\") else: print(\"Sorry, I didn't understand that command.\")\n","\n","##Interface\n","\n","input_box = widgets.Text(placeholder='Enter command (e.g., navigate)') button = widgets.Button(description=\"Send\") output = widgets.Output()\n","\n","def on_button_click(b): with output: clear_output() chatbot_response(input_box.value)\n","\n","button.on_click(on_button_click) display(widgets.VBox([input_box, button, output]))\n","\n","##phase 5\n","import matplotlib.pyplot as plt\n","import numpy as np\n","from queue import PriorityQueue\n","from cryptography.fernet import Fernet\n","\n","# Define environment grid values\n","EMPTY, OBSTACLE, PEDESTRIAN, VEHICLE = 0, 1, 2, 3\n","colors = {EMPTY: \"white\", OBSTACLE: \"black\", PEDESTRIAN: \"magenta\", VEHICLE: \"cyan\"}\n","\n","# Generate a grid environment\n","np.random.seed(10)\n","grid_size = (15, 15)\n","env = np.random.choice([EMPTY, OBSTACLE, PEDESTRIAN], size=grid_size, p=[0.75, 0.15, 0.1])\n","env[0, 0] = EMPTY\n","env[-1, -1] = EMPTY\n","\n","def heuristic(a, b):\n","    return abs(a[0] - b[0]) + abs(a[1] - b[1])\n","\n","def get_neighbors(pos, env):\n","    directions = [(-1,0),(1,0),(0,-1),(0,1)]\n","    neighbors = []\n","    for dr, dc in directions:\n","        r, c = pos[0] + dr, pos[1] + dc\n","        if 0 <= r < env.shape[0] and 0 <= c < env.shape[1] and env[r][c] != OBSTACLE:\n","            neighbors.append((r, c))\n","    return neighbors\n","\n","def a_star(env, start, goal):\n","    open_set = PriorityQueue()\n","    open_set.put((0, start))\n","    came_from = {}\n","    g = {start: 0}\n","    f = {start: heuristic(start, goal)}\n","\n","    while not open_set.empty():\n","        _, current = open_set.get()\n","        if current == goal:\n","            path = []\n","            while current in came_from:\n","                path.append(current)\n","                current = came_from[current]\n","            return path[::-1]\n","        for neighbor in get_neighbors(current, env):\n","            temp_g = g[current] + 1\n","            if neighbor not in g or temp_g < g[neighbor]:\n","                came_from[neighbor] = current\n","                g[neighbor] = temp_g\n","                f[neighbor] = temp_g + heuristic(neighbor, goal)\n","                open_set.put((f[neighbor], neighbor))\n","    return []\n","\n","def draw_grid(env, path, start, goal):\n","    fig, ax = plt.subplots(figsize=(8, 8))\n","    for r in range(env.shape[0]):\n","        for c in range(env.shape[1]):\n","            ax.add_patch(plt.Rectangle((c, -r), 1, 1, facecolor=colors[env[r, c]], edgecolor='gray'))\n","    for r, c in path:\n","        ax.plot(c + 0.5, -r - 0.5, 'green', marker='o')\n","    ax.plot(start[1]+0.5, -start[0]-0.5, 'bo', label='Start')\n","    ax.plot(goal[1]+0.5, -goal[0]-0.5, 'ro', label='Goal')\n","    ax.set_xlim(0, env.shape[1])\n","    ax.set_ylim(-env.shape[0], 0)\n","    ax.set_aspect('equal')\n","    plt.title(\"AI Pathfinding in Autonomous Navigation\")\n","    plt.legend()\n","    plt.show()\n","\n","def simulate_sensor(current, env):\n","    print(f\"Sensor scanning at position {current}...\")\n","    r, c = current\n","    for i in range(r-1, r+2):\n","        for j in range(c-1, c+2):\n","            if 0 <= i < env.shape[0] and 0 <= j < env.shape[1]:\n","                cell = env[i][j]\n","                if cell == OBSTACLE:\n","                    print(f\"Obstacle at {(i, j)}\")\n","                elif cell == PEDESTRIAN:\n","                    print(f\"Pedestrian at {(i, j)}\")\n","\n","def encrypt_path_data(path):\n","    key = Fernet.generate_key()\n","    fernet = Fernet(key)\n","    path_str = ','.join([f\"{r}-{c}\" for r, c in path])\n","    encrypted = fernet.encrypt(path_str.encode())\n","    print(\"Encrypted path data:\", encrypted)\n","    decrypted = fernet.decrypt(encrypted).decode()\n","    print(\"Decrypted path data:\", decrypted)\n","    return encrypted\n","\n","# Chatbot simulation\n","def chatbot():\n","    print(\"Chatbot: Hello! Type 'start' to begin pathfinding, 'sensor' to scan area, or 'exit' to quit.\")\n","    while True:\n","        cmd = input(\"You: \").lower()\n","        if cmd == \"start\":\n","            path = a_star(env, start, goal)\n","            if path:\n","                print(\"Chatbot: Path found! Encrypting and drawing...\")\n","                encrypt_path_data(path)\n","                draw_grid(env, path, start, goal)\n","            else:\n","                print(\"Chatbot: No path found.\")\n","        elif cmd == \"sensor\":\n","            simulate_sensor(start, env)\n","        elif cmd == \"exit\":\n","            print(\"Chatbot: Goodbye!\")\n","            break\n","        else:\n","            print(\"Chatbot: Unknown command. Try 'start', 'sensor', or 'exit'.\")\n","\n","# Initialize start and goal\n","start = (0, 0)\n","goal = (grid_size[0]-1, grid_size[1]-1)\n","\n","# Run chatbot interface\n","chatbot()\n","##Final project\n","\n","import matplotlib.pyplot as plt\n","import numpy as np from queue\n","import PriorityQueue\n","import hashlib\n","import random\n","\n","\n","EMPTY, OBSTACLE, PEDESTRIAN, VEHICLE = 0, 1, 2, 3 colors = {EMPTY: \"white\", OBSTACLE: \"black\", PEDESTRIAN: \"magenta\", VEHICLE: \"cyan\"}\n","\n","def heuristic(a, b): return abs(a[0] - b[0]) + abs(a[1] - b[1])\n","\n","def get_neighbors(pos, env): directions = [(-1,0), (1,0), (0,-1), (0,1)] neighbors = [] for dr, dc in directions: r, c = pos[0] + dr, pos[1] + dc if 0 <= r < env.shape[0] and 0 <= c < env.shape[1] and env[r][c] != OBSTACLE: neighbors.append((r, c)) return neighbors\n","\n","def a_star(env, start, goal): open_set = PriorityQueue() open_set.put((0, start)) came_from = {} g = {start: 0} f = {start: heuristic(start, goal)}\n","\n","while not open_set.empty():\n","    _, current = open_set.get()\n","    if current == goal:\n","        path = []\n","        while current in came_from:\n","            path.append(current)\n","            current = came_from[current]\n","        return path[::-1]\n","\n","    for neighbor in get_neighbors(current, env):\n","        temp_g = g[current] + 1\n","        if neighbor not in g or temp_g < g[neighbor]:\n","            came_from[neighbor] = current\n","            g[neighbor] = temp_g\n","            f[neighbor] = temp_g + heuristic(neighbor, goal)\n","            open_set.put((f[neighbor], neighbor))\n","retutn[]\n","\n","def simulate_sensor_data():\n","  return { \"temperature\": round(random.uniform(18, 35), 2), \"humidity\": round(random.uniform(30, 70), 2), \"obstacle_distance\": round(random.uniform(0.5, 5.0), 2) }\n","\n","def encrypt_data(data):\n","  return hashlib.sha256(data.encode()).hexdigest()\n","\n","\n","def chatbot_response(user_input):\n","   responses = { \"function\": \"I manage autonomous vehicle navigation and environment mapping.\", \"obstacles\": \"I use sensor input to detect and avoid obstacles.\", \"security\": \"All sensor data is encrypted for safety.\", \"developer\": \"Built for AI project under robotics and automation.\" }\n","  return responses.get(user_input.lower(), \"Sorry, I didn't understand that.\")\n","\n","def visualize(env, path, start, goal):\n","   fig, ax = plt.subplots(figsize=(6, 6))\n","   for r in range(env.shape[0]):\n","    for c in range(env.shape[1]):\n","      ax.add_patch(plt.Rectangle((c, -r), 1, 1, facecolor=colors[env[r, c]], edgecolor='gray'))\n","    for r, c in path:\n","      ax.plot(c + 0.5, -r - 0.5, 'go')\n","      ax.plot(start[1]+0.5, -start[0]-0.5, 'bo', label='Start') ax.plot(goal[1]+0.5, -goal[0]-0.5, 'ro', label='Goal')\n","      ax.set_xlim(0, env.shape[1])\n","      ax.set_ylim(-env.shape[0], 0)\n","      ax.set_aspect('equal')\n","      plt.title(\"AI Navigation with Chatbot and IoT Integration\")\n","      plt.legend()\n","      plt.axis('off')\n","      plt.show()\n","\n","\n","np.random.seed(21) grid_size = (10, 10) env = np.random.choice([EMPTY, OBSTACLE, PEDESTRIAN], size=grid_size, p=[0.75, 0.15, 0.1]) env[0, 0] = EMPTY env[-1, -1] = EMPTY\n","\n","start, goal = (0, 0), (9, 9) path = a_star(env, start, goal) visualize(env, path, start, goal)\n","\n","Sensor simulation and encryption\n","\n","sensor_data = simulate_sensor_data() encrypted = {k: encrypt_data(str(v)) for k, v in sensor_data.items()}\n","\n","Chatbot interaction\n","\n","sample_query = \"function\" chat_reply = chatbot_response(sample_query)\n","\n","Display logs\n","\n","print(\"Chatbot Query:\", sample_query) print(\"Chatbot Reply:\", chat_reply) print(\"Sensor Data:\", sensor_data) print(\"Encrypted Data:\", encrypted)"]}]}